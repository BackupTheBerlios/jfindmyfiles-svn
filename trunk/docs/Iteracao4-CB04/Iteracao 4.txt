<==== Objectivos ==============================================================>
Acrescentar ao modelo de dados a informação necessária para permitir guardar a 
localização física de um disco, quando se trate de um suporte amovível.
Implementar mecanismos de pesquisa que permitam encontrar os dados pretendidos, 
usando expressões regulares na pesquisa, permitindo definir o âmbito e se a 
pesquisa é efectuada também nas descrições e definir se se pretendem pesquisas 
insensíveis a maíusculas ou minúsculas.
Implementar suporte para abrir os ficheiros e/ou a localização de um ficheiro 
cujo suporte esteja disponível.
Implementar elementos de interface gráfica e módulos que permitam escolher o 
tipo de motor de base de dados a usar para guardar o catálogo.
Implementar um sistema que permita identificar ficheiros duplicados no catálogo.

<==== Documentos produzidos ===================================================>
Spikes:
	ExecutarFicheiro - permitiu testar a forma de executar um ficheiro, a 
		partir de uma aplicação Java, usando a nova API introduzinda na versão 
		6 da plataforma Java.
<====
A utilização da tecnologia Hibernate, com a sua linguagem de pesquisas própria, 
permitirá facilmente atingir os objectivos base pretendidos para esta iteração.
Dado que a mesma tecnologia permite o uso de SQL nas pesquisas, a versatilidade 
da linguagem de pesquisa estrutura será uma mais valia caso se pretenda um 
melhor controlo sobre o acesso aos dados.
No entanto, o requisito de pesquisas com suporte para expressões regulares, é 
limitado pela falta de suporte a esse tipo de pesquisas, tanto na linguagem SQL 
como no sistema Hibernate.

Não será possível saber se um ficheiro existe sem o tentar abrir, ou pelo menos 
sem criar um objecto do tipo File e usar os seus métodos para verificar a 
existência do ficheiro. Assim, não será possível activar ou desactivar a opção 
de abrir um determinado ficheiro quando o mesmo está disponível ou indisponível.
Esta opção será implementada de outra forma, em vez de activar ou desactivar as 
interfaces com o utilizador dependendo da disponibilidade dos ficheiros, as 
opções estarão sempre disponíveis, sendo que, quando o utilizador tentar abrir 
um determinado ficheiro, é verificado se o ficheiro se encontra ou não presente 
para ser aberto.

Para identificar ficheiros duplicados é necessário criar, para cada ficheiro 
lido, um código de identificação único que mais tarde possa ser comparado.
Para gerar esse código iremos recorrer ao algoritmo SHA-1, que permite criar 
um código hash, com alguma segurança de unicidade.
Dado que o algoritmo é bastante conhecido, existem várias implementações do 
mesmo, que poderiam ser usadas. Após uma breve pesquisa, foi escolhida a 
biblioteca jacksum, pela sua simplicidade de utilização, diversidade de 
algoritmos oferecidos, licença open source, e principalmente por ser 
completamente implementada em Java, o que, em oposição a outras bibliotecas, 
como a FastMD5, garante o requisito de que a aplicação terá de ser 
multiplataforma.
<==== Avaliação ===============================================================>
Não foi resolvido o problema das pesquisas com expressões regulares.
Uma vez que se pretende independência do motor de bases de dados que apoia o 
sistema de persistência, não poderá ser usada nenhuma funcionalidade da 
linguagem SQL que não seja standard. Assim, não é possível tirar partido do 
suporte para expressões regulares que alguns motores de bases de dados oferecem.

A introdução do algoritmo de cálculo do código hash provocou um aumento da 
memória consumida e do tempo necessário para efectuar a leitura dos dados dos 
ficheiros. Quando o suporte a ser lido contém muitos ficheiros e pastas é 
possível que a memória, definida por omissão para a JVM, não seja suficiente 
para a execução do processo de leitura.

O sistema que permite abrir/executar um ficheiro, está dependente do sistema
operativo. Apesar de ser ter usado uma funcionalidade da plataforma Java, 
presente desde o Java 6, não é feita nenhuma garantia que a funcionalidade 
esteja disponível em todos os sistemas operativos e plataformas.



