Manual de Programador para o Sistema de Extensões

Criação de Extensões
O software permite a criação de extensões, que serão usados durante a leitura 
de ficheiros, para a obtenção de informações mais específicas sobre um 
determinado ficheiro. A criação de uma extensão passa pela sua programação, 
usando a linguagem Java.

A classe a ser usada como ponto de entrada deverá implementar a interface 
de.berlios.jfindmyfiles.readingfiles.pluginapi.Reader, definida na biblioteca 
de-berlios-jfindmyfiles-readingfiles.jar, contida na pasta de instalação da 
aplicação.

A interface define os seguintes métodos:
	- getName – Método que devolve um valor do tipo String que representa o 
	nome da extensão. O nome de uma extensão não necessita ser único, uma vez 
	que é usado apenas na apresentação ao utilizador, mas deve manter-se c
	onstante durante todas as execuções da aplicação. Sugere-se a utilização de 
	um atributo de classe, constante, para a definição do nome.
	- getAuthor – Método que permite obter o nome do autor da extensão. Tal com 
	o método anterior, o valor devolvido é do tipo String e, do mesmo modo se 
	recomenda o uso de atributos de classe constantes.
	- pluginFor – Método que permite determinar a extensão do ficheiro sobre o 
	qual esta extensão irá actuar. Deve ser notado, no entanto, que a extensão 
	de um ficheiro não terá significado em todos os sistemas operativos, mas 
	esta é a forma de identificar uma extensão da aplicação inequivocamente. 
	Este método deverá devolver um valor do tipo String que contenha a extensão 
	comummente usada nos ficheiros que se pretendem ler, caso duas extensões da 
	aplicação se registem para o mesmo tipo de ficheiro, apenas a última a ser 
	registada prevalece, sendo que a ordem pela qual as extensões da aplicação 
	são registadas, não pode ser garantida. Cabe ao utilizador, e não ao 
	programador da extensão de aplicação, acautelar qualquer situação de 
	conflito.
	- read – Este é o método que efectua a leitura das informações de 
	ficheiros. É-lhe passado um parâmetro, do tipo File, que representa o 
	ficheiro a ler. A leitura de informação é síncrona, pelo que se espera que 
	este método termine o mais rapidamente possível, não efectuando nada mais 
	além do estritamente necessário para a obtenção e devolução da informação. 
	Toda a informação é encapsulada num objecto do tipo DescriptionValues, que 
	é devolvido por este método no fim da sua execução. O objecto não deverá 
	ser null, pelo que, caso seja, deverá ser devolvido um objecto criado com o 
	construtor sem argumentos da classe DescriptionValues.
	- isActive – Forma de determinar se uma extensão se encontra activo ou não. 
	Este método deve ser implementado para reflectir o estado da extensão e não 
	deve devolver sempre um valor predefinido. Ao implementar uma extensão, o 
	programador não se deve preocupar com quem irá alterar o valor mas sim 
	garantir que é possível alterar o estado da extensão, uma implementação 
	típica será:
		private boolean active;
	
		public boolean isActive() {
			return active;
		}
	- setActive – Permite definir o estado de uma extensão. Este método deverá 
	ser implementado de forma a que o método anterior, isActive, reflicta 
	correctamente o estado da extensão.
