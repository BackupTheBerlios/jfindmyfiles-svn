/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui;

import de.berlios.jfindmyfiles.jfindmyfilesgui.nodes.SearchParentNode;
import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
public final class DuplicateResultsTopComponent extends TopComponent {

    private final ExplorerManager manager = new ExplorerManager();
    private final BeanTreeView view = new BeanTreeView();
    private static DuplicateResultsTopComponent instance;
    private static final String PREFERRED_ID = "DuplicateResultsTopComponent";

    private DuplicateResultsTopComponent() {
        myInitComponents();
        setName(NbBundle.getMessage(DuplicateResultsTopComponent.class, "CTL_DuplicateResultsTopComponent"));
        setToolTipText(NbBundle.getMessage(DuplicateResultsTopComponent.class, "HINT_DuplicateResultsTopComponent"));
    }

    private void myInitComponents() {
        setLayout(new BorderLayout());
        add(view, BorderLayout.CENTER);
        view.setRootVisible(true);
        manager.setRootContext(new SearchParentNode());

        ActionMap map = getActionMap();
    //map.put("delete", ExplorerUtils.actionDelete(manager, true));
    //associateLookup(ExplorerUtils.createLookup(manager, map));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 70, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized DuplicateResultsTopComponent getDefault() {
        if (instance == null) {
            instance = new DuplicateResultsTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the DuplicateResultsTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DuplicateResultsTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DuplicateResultsTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DuplicateResultsTopComponent) {
            return (DuplicateResultsTopComponent) win;
        }
        Logger.getLogger(DuplicateResultsTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return DuplicateResultsTopComponent.getDefault();
        }
    }
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    public void startSearching() {
        //TODO: searchig for duplicates
        /*CatalogEngine eng = Lookup.getDefault().lookup(CatalogEngine.class);
        Session s = eng.sessionFactory.getCurrentSession();
        s.beginTransaction();
        s.createCriteria(FileWrapper.class).add(Restrictions.like("sha1", hash, MatchMode.EXACT)).list();
        s.getTransaction().commit();*/
    }
}
