/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui;

import de.berlios.jfindmyfiles.catalog.CatalogEngine;
import de.berlios.jfindmyfiles.catalog.entities.User;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.table.AbstractTableModel;
import org.hibernate.Session;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
final class ManageUsersTopComponent extends TopComponent {

    private static ManageUsersTopComponent instance;
    private CatalogEngine eng;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "ManageUsersTopComponent";

    private ManageUsersTopComponent() {
        eng = Lookup.getDefault().lookup(CatalogEngine.class);
        initComponents();
        setName(NbBundle.getMessage(ManageUsersTopComponent.class, "CTL_ManageUsersTopComponent"));
        setToolTipText(NbBundle.getMessage(ManageUsersTopComponent.class, "HINT_ManageUsersTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jbtnAddUser = new javax.swing.JButton();
        jbtnRemoveUser = new javax.swing.JButton();
        jscpUsers = new javax.swing.JScrollPane();
        jtUsers = new javax.swing.JTable();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jbtnAddUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x16/user-add.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jbtnAddUser, org.openide.util.NbBundle.getMessage(ManageUsersTopComponent.class, "ManageUsersTopComponent.jbtnAddUser.text")); // NOI18N
        jbtnAddUser.setFocusable(false);
        jbtnAddUser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnAddUser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jbtnAddUser);

        jbtnRemoveUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x16/user-remove.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jbtnRemoveUser, org.openide.util.NbBundle.getMessage(ManageUsersTopComponent.class, "ManageUsersTopComponent.jbtnRemoveUser.text")); // NOI18N
        jbtnRemoveUser.setFocusable(false);
        jbtnRemoveUser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbtnRemoveUser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jbtnRemoveUser);

        jtUsers.setModel(new UserTableModel());
        jscpUsers.setViewportView(jtUsers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jscpUsers, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jscpUsers, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jbtnAddUser;
    private javax.swing.JButton jbtnRemoveUser;
    private javax.swing.JScrollPane jscpUsers;
    private javax.swing.JTable jtUsers;
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ManageUsersTopComponent getDefault() {
        if (instance == null) {
            instance = new ManageUsersTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ManageUsersTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ManageUsersTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ManageUsersTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ManageUsersTopComponent) {
            return (ManageUsersTopComponent) win;
        }
        Logger.getLogger(ManageUsersTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ManageUsersTopComponent.getDefault();
        }
    }

    private class UserTableModel extends AbstractTableModel {

        private List<User> users;
        
        @SuppressWarnings("unchecked")
        public UserTableModel() {
            users = new LinkedList<User>();
            Session s = eng.sessionFactory.getCurrentSession();
            s.beginTransaction();
            users.addAll(s.createQuery("from User").list());
            s.getTransaction().commit();
        }

        public int getRowCount() {
            return users.size();
        }

        public int getColumnCount() {
            return 3;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return users.get(rowIndex).getId();
                case 1:
                    return users.get(rowIndex).getFirstname();
                case 2:
                    return users.get(rowIndex).getSurname();
            }
            return null;
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return Long.class;
                case 1:
                    return String.class;
                case 2:
                    return String.class;
            }
            return Object.class;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }
    }
}
