/**
 *  Copyright (C) 2008  Patrícia Monteiro e Sérgio Lopes
 *
 *  This file is part of JFindMyFiles.
 *
 *  JFindMyFiles is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JFindMyFiles is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JFindMyFiles.  If not, see 
 * <http://www.gnu.org/licenses/gpl.html>.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui.dialogs;

import de.berlios.jfindmyfiles.exportengine.CSV;
import de.berlios.jfindmyfiles.exportengine.ExportListener;
import de.berlios.jfindmyfiles.exportengine.SQL;
import de.berlios.jfindmyfiles.exportengine.XML;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingConstants;
import org.openide.util.Utilities;

/**
 *
 * @author  knitter
 */
public class ExportDlg extends javax.swing.JDialog implements ExportListener {

    /*private static final int EXPORT_CVS = 0;
    private static final int EXPORT_HTML = 1;
    private static final int EXPORT_ODS = 2;
    private static final int EXPORT_XLS = 3;
    private static final int EXPORT_XML = 4;
    private static final int EXPORT_SQL = 5;*/
    private Integer[] values = new Integer[]{0, 1, 2, 3, 4, 5};
    private File selectedFile;

    /** Creates new form ExportDlg */
    public ExportDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //TODO:
        jPanel1.setVisible(true);
        jPanel2.setVisible(false);
        this.add(jPanel2, BorderLayout.CENTER);
        this.add(jPanel1, BorderLayout.CENTER);
    }

    public void showCentered() {
        setLocation(getParent().getX() + (getParent().getWidth() / 2) - (getWidth() / 2),
                getParent().getY() + (getParent().getHeight() / 2) - (getHeight() / 2));
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jpExportType = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlstExportTypes = new JList(values);
        jpExportOptions = new javax.swing.JPanel();
        jpFileExport = new javax.swing.JPanel();
        jlblDestination = new javax.swing.JLabel();
        jtfDestination = new javax.swing.JTextField();
        jbtnBrowse = new javax.swing.JButton();
        jpTemplateExport = new javax.swing.JPanel();
        jbtnCancel = new javax.swing.JButton();
        jbtnExport = new javax.swing.JButton();
        jbtnHelp = new javax.swing.JButton();

        jLabel2.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jLabel2)
                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel2)
                .addContainerGap(280, Short.MAX_VALUE))
        );

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel1)
                .addContainerGap(254, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addComponent(jLabel1)
                .addContainerGap(252, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpExportType.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpExportType.border.title"))); // NOI18N

        jlstExportTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstExportTypes.setCellRenderer(new Renderer());
        jlstExportTypes.setFixedCellHeight(62);
        jlstExportTypes.setVisibleRowCount(6);
        jlstExportTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstExportTypesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlstExportTypes);

        javax.swing.GroupLayout jpExportTypeLayout = new javax.swing.GroupLayout(jpExportType);
        jpExportType.setLayout(jpExportTypeLayout);
        jpExportTypeLayout.setHorizontalGroup(
            jpExportTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpExportTypeLayout.setVerticalGroup(
            jpExportTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportTypeLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpExportOptions.setLayout(new java.awt.CardLayout());

        jpFileExport.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpFileExport.border.title"))); // NOI18N

        jlblDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblDestination.text")); // NOI18N

        jtfDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jtfDestination.text")); // NOI18N

        jbtnBrowse.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnBrowse.text")); // NOI18N
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFileExportLayout = new javax.swing.GroupLayout(jpFileExport);
        jpFileExport.setLayout(jpFileExportLayout);
        jpFileExportLayout.setHorizontalGroup(
            jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFileExportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblDestination)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfDestination, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnBrowse)
                .addContainerGap())
        );
        jpFileExportLayout.setVerticalGroup(
            jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFileExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblDestination)
                    .addComponent(jbtnBrowse)
                    .addComponent(jtfDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        jpExportOptions.add(jpFileExport, "card2");

        jpTemplateExport.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpTemplateExport.border.title"))); // NOI18N

        javax.swing.GroupLayout jpTemplateExportLayout = new javax.swing.GroupLayout(jpTemplateExport);
        jpTemplateExport.setLayout(jpTemplateExportLayout);
        jpTemplateExportLayout.setHorizontalGroup(
            jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 361, Short.MAX_VALUE)
        );
        jpTemplateExportLayout.setVerticalGroup(
            jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jpExportOptions.add(jpTemplateExport, "card3");

        jbtnCancel.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnCancel.text")); // NOI18N
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jbtnExport.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnExport.text")); // NOI18N
        jbtnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnExportActionPerformed(evt);
            }
        });

        jbtnHelp.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnHelp.text")); // NOI18N
        jbtnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpExportType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpExportOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbtnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnHelp)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtnCancel, jbtnExport, jbtnHelp});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpExportOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(jpExportType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnHelp)
                    .addComponent(jbtnCancel)
                    .addComponent(jbtnExport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jlstExportTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstExportTypesValueChanged
    if (jlstExportTypes.getSelectedIndex() == 1) {
        CardLayout lay = (CardLayout) jpExportOptions.getLayout();
        lay.last(jpExportOptions);
    } else {
        CardLayout lay = (CardLayout) jpExportOptions.getLayout();
        lay.first(jpExportOptions);
    }
}//GEN-LAST:event_jlstExportTypesValueChanged

private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    dispose();
}//GEN-LAST:event_jbtnCancelActionPerformed

private void jbtnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExportActionPerformed
    //csv html sql ods xls xml
    switch (jlstExportTypes.getSelectedIndex()) {
        case 0://CSV
            new CSV(selectedFile).export();
            break;
        case 1://HTML
            break;
        case 2://SQL
            new SQL(selectedFile).export();
            break;
        case 3://ODS
            break;
        case 4://XLS
            break;
        case 5://XML
            new XML(selectedFile).export();

    }
}//GEN-LAST:event_jbtnExportActionPerformed

private void jbtnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnHelpActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jbtnHelpActionPerformed

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
    JFileChooser jfc = new JFileChooser();
    if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        selectedFile = jfc.getSelectedFile();
        jtfDestination.setText(selectedFile.getAbsolutePath());
    }
}//GEN-LAST:event_jbtnBrowseActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnExport;
    private javax.swing.JButton jbtnHelp;
    private javax.swing.JLabel jlblDestination;
    private javax.swing.JList jlstExportTypes;
    private javax.swing.JPanel jpExportOptions;
    private javax.swing.JPanel jpExportType;
    private javax.swing.JPanel jpFileExport;
    private javax.swing.JPanel jpTemplateExport;
    private javax.swing.JTextField jtfDestination;
    // End of variables declaration//GEN-END:variables
    /**
     * Renderer class for showing icons on the list of existing export options
     */
    private class Renderer extends JLabel implements ListCellRenderer {

        private ImageIcon[] images;

        public Renderer() {
            images = new ImageIcon[]{
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-csv.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-html.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-ods.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-sql.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-xls.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-xml.png"))
                    };

            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
            setVerticalAlignment(SwingConstants.CENTER);
        }

        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            int selectedIndex = ((Integer) value).intValue();

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            setIcon(images[selectedIndex]);
            setFont(list.getFont());
            return this;
        }
    }

    public void exportStarted() {
        //TODO:
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportFinished() {
        //TODO:
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void exportError() {
        //TODO:
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
