/**
 *  Copyright (C) 2008  Patrícia Monteiro e Sérgio Lopes
 *
 *  This file is part of JFindMyFiles.
 *
 *  JFindMyFiles is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JFindMyFiles is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JFindMyFiles.  If not, see 
 * <http://www.gnu.org/licenses/gpl.html>.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui.dialogs;

import de.berlios.jfindmyfiles.exportengine.CSV;
import de.berlios.jfindmyfiles.exportengine.ExportListener;
import de.berlios.jfindmyfiles.exportengine.HTML;
import de.berlios.jfindmyfiles.exportengine.ODS;
import de.berlios.jfindmyfiles.exportengine.SQL;
import de.berlios.jfindmyfiles.exportengine.XLS;
import de.berlios.jfindmyfiles.exportengine.XML;
import java.awt.CardLayout;
import java.awt.Component;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingConstants;
import org.openide.util.Utilities;

/**
 *
 * @author  knitter
 */
public class ExportDlg extends javax.swing.JDialog implements ExportListener {

    /*private static final int EXPORT_CVS = 0;
    private static final int EXPORT_HTML = 1;
    private static final int EXPORT_ODS = 2;
    private static final int EXPORT_XLS = 3;
    private static final int EXPORT_XML = 4;
    private static final int EXPORT_SQL = 5;*/
    private Integer[] values = new Integer[]{0, 1, 2, 3, 4, 5};
    private File selectedFile;
    private int visiblePanel = 0,  previousPanel = 0;

    /** Creates new form ExportDlg */
    public ExportDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void showCentered() {
        setLocation(getParent().getX() + (getParent().getWidth() / 2) - (getWidth() / 2),
                getParent().getY() + (getParent().getHeight() / 2) - (getHeight() / 2));
        setVisible(true);
    }

    private void loadTemplates() {
        //TODO: read template directory and load them in
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpExportType = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlstExportTypes = new JList(values);
        jpExportOptions = new javax.swing.JPanel();
        jpFileExport = new javax.swing.JPanel();
        jlblDestination = new javax.swing.JLabel();
        jtfDestination = new javax.swing.JTextField();
        jbtnBrowse = new javax.swing.JButton();
        jchkOpenAfter = new javax.swing.JCheckBox();
        jlblInclude = new javax.swing.JLabel();
        jchkIncludeImages = new javax.swing.JCheckBox();
        jchkIncludeAudioC = new javax.swing.JCheckBox();
        jchkIncludeVideoP = new javax.swing.JCheckBox();
        jchkIncludeCustomI = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jpTemplateExport = new javax.swing.JPanel();
        jpPreview = new javax.swing.JPanel();
        jlblPreview = new javax.swing.JLabel();
        jlblTemplateDestination = new javax.swing.JLabel();
        jtfTemplateDestination = new javax.swing.JTextField();
        jbtnTemplateBrowse = new javax.swing.JButton();
        jpTemplateDetails = new javax.swing.JPanel();
        jlblSelectTemplate = new javax.swing.JLabel();
        jcbxSelectTemplate = new javax.swing.JComboBox();
        jsDetailsSeparator = new javax.swing.JSeparator();
        jlblTemplateAuthor = new javax.swing.JLabel();
        jlblTemplateAuthorValue = new javax.swing.JLabel();
        jchkTemplateOpenAfter = new javax.swing.JCheckBox();
        jpProgressBar = new javax.swing.JPanel();
        jpbExportProgress = new javax.swing.JProgressBar();
        jbtnCancel = new javax.swing.JButton();
        jbtnExport = new javax.swing.JButton();
        jbtnHelp = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpExportType.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpExportType.border.title"))); // NOI18N

        jlstExportTypes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlstExportTypes.setCellRenderer(new Renderer());
        jlstExportTypes.setFixedCellHeight(62);
        jlstExportTypes.setVisibleRowCount(6);
        jlstExportTypes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstExportTypesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlstExportTypes);

        javax.swing.GroupLayout jpExportTypeLayout = new javax.swing.GroupLayout(jpExportType);
        jpExportType.setLayout(jpExportTypeLayout);
        jpExportTypeLayout.setHorizontalGroup(
            jpExportTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpExportTypeLayout.setVerticalGroup(
            jpExportTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpExportTypeLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpExportOptions.setLayout(new java.awt.CardLayout());

        jpFileExport.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpFileExport.border.title"))); // NOI18N

        jlblDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblDestination.text")); // NOI18N

        jtfDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jtfDestination.text")); // NOI18N

        jbtnBrowse.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnBrowse.text")); // NOI18N
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });

        jchkOpenAfter.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkOpenAfter.text")); // NOI18N
        jchkOpenAfter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jchkOpenAfterStateChanged(evt);
            }
        });

        jlblInclude.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblInclude.text")); // NOI18N

        jchkIncludeImages.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkIncludeImages.text")); // NOI18N

        jchkIncludeAudioC.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkIncludeAudioC.text")); // NOI18N

        jchkIncludeVideoP.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkIncludeVideoP.text")); // NOI18N

        jchkIncludeCustomI.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkIncludeCustomI.text")); // NOI18N

        javax.swing.GroupLayout jpFileExportLayout = new javax.swing.GroupLayout(jpFileExport);
        jpFileExport.setLayout(jpFileExportLayout);
        jpFileExportLayout.setHorizontalGroup(
            jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFileExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkOpenAfter)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                    .addGroup(jpFileExportLayout.createSequentialGroup()
                        .addComponent(jlblInclude)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
                    .addGroup(jpFileExportLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jchkIncludeImages)
                            .addComponent(jchkIncludeAudioC)
                            .addComponent(jchkIncludeVideoP)
                            .addComponent(jchkIncludeCustomI))
                        .addGap(4, 4, 4))
                    .addGroup(jpFileExportLayout.createSequentialGroup()
                        .addComponent(jlblDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfDestination, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnBrowse)))
                .addContainerGap())
        );
        jpFileExportLayout.setVerticalGroup(
            jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFileExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblDestination)
                    .addComponent(jbtnBrowse)
                    .addComponent(jtfDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpFileExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jlblInclude)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkIncludeAudioC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkIncludeImages)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkIncludeVideoP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkIncludeCustomI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkOpenAfter)
                .addContainerGap(115, Short.MAX_VALUE))
        );

        jpExportOptions.add(jpFileExport, "card2");

        jpTemplateExport.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpTemplateExport.border.title"))); // NOI18N

        jpPreview.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpPreview.border.title"))); // NOI18N

        jlblPreview.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblPreview.text")); // NOI18N
        jlblPreview.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jpPreviewLayout = new javax.swing.GroupLayout(jpPreview);
        jpPreview.setLayout(jpPreviewLayout);
        jpPreviewLayout.setHorizontalGroup(
            jpPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlblPreview, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
        );
        jpPreviewLayout.setVerticalGroup(
            jpPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlblPreview, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );

        jlblTemplateDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblTemplateDestination.text")); // NOI18N

        jtfTemplateDestination.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jtfTemplateDestination.text")); // NOI18N

        jbtnTemplateBrowse.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnTemplateBrowse.text")); // NOI18N
        jbtnTemplateBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnTemplateBrowseActionPerformed(evt);
            }
        });

        jlblSelectTemplate.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblSelectTemplate.text")); // NOI18N

        jcbxSelectTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbxSelectTemplateActionPerformed(evt);
            }
        });

        jlblTemplateAuthor.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblTemplateAuthor.text")); // NOI18N

        jlblTemplateAuthorValue.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jlblTemplateAuthorValue.text")); // NOI18N

        javax.swing.GroupLayout jpTemplateDetailsLayout = new javax.swing.GroupLayout(jpTemplateDetails);
        jpTemplateDetails.setLayout(jpTemplateDetailsLayout);
        jpTemplateDetailsLayout.setHorizontalGroup(
            jpTemplateDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTemplateDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTemplateDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jsDetailsSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addGroup(jpTemplateDetailsLayout.createSequentialGroup()
                        .addComponent(jlblSelectTemplate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbxSelectTemplate, 0, 117, Short.MAX_VALUE))
                    .addGroup(jpTemplateDetailsLayout.createSequentialGroup()
                        .addComponent(jlblTemplateAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblTemplateAuthorValue, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpTemplateDetailsLayout.setVerticalGroup(
            jpTemplateDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTemplateDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTemplateDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblSelectTemplate)
                    .addComponent(jcbxSelectTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jsDetailsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpTemplateDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblTemplateAuthor)
                    .addComponent(jlblTemplateAuthorValue))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        jchkTemplateOpenAfter.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jchkTemplateOpenAfter.text")); // NOI18N
        jchkTemplateOpenAfter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jchkTemplateOpenAfterStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jpTemplateExportLayout = new javax.swing.GroupLayout(jpTemplateExport);
        jpTemplateExport.setLayout(jpTemplateExportLayout);
        jpTemplateExportLayout.setHorizontalGroup(
            jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTemplateExportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpTemplateExportLayout.createSequentialGroup()
                        .addComponent(jpPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpTemplateDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpTemplateExportLayout.createSequentialGroup()
                        .addComponent(jlblTemplateDestination)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jchkTemplateOpenAfter)
                            .addGroup(jpTemplateExportLayout.createSequentialGroup()
                                .addComponent(jtfTemplateDestination, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnTemplateBrowse)))))
                .addContainerGap())
        );
        jpTemplateExportLayout.setVerticalGroup(
            jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTemplateExportLayout.createSequentialGroup()
                .addGroup(jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jpTemplateExportLayout.createSequentialGroup()
                        .addComponent(jpPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpTemplateExportLayout.createSequentialGroup()
                        .addComponent(jpTemplateDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jpTemplateExportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblTemplateDestination)
                    .addComponent(jbtnTemplateBrowse)
                    .addComponent(jtfTemplateDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchkTemplateOpenAfter)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jpExportOptions.add(jpTemplateExport, "card3");

        jpbExportProgress.setIndeterminate(true);
        jpbExportProgress.setString(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jpbExportProgress.string")); // NOI18N
        jpbExportProgress.setStringPainted(true);

        javax.swing.GroupLayout jpProgressBarLayout = new javax.swing.GroupLayout(jpProgressBar);
        jpProgressBar.setLayout(jpProgressBarLayout);
        jpProgressBarLayout.setHorizontalGroup(
            jpProgressBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpProgressBarLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jpbExportProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jpProgressBarLayout.setVerticalGroup(
            jpProgressBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpProgressBarLayout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jpbExportProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        jpExportOptions.add(jpProgressBar, "card4");

        jbtnCancel.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnCancel.text")); // NOI18N
        jbtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelActionPerformed(evt);
            }
        });

        jbtnExport.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnExport.text")); // NOI18N
        jbtnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnExportActionPerformed(evt);
            }
        });

        jbtnHelp.setText(org.openide.util.NbBundle.getMessage(ExportDlg.class, "ExportDlg.jbtnHelp.text")); // NOI18N
        jbtnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnHelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpExportType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpExportOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbtnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnHelp)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jbtnCancel, jbtnExport, jbtnHelp});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jpExportOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(jpExportType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnHelp)
                    .addComponent(jbtnCancel)
                    .addComponent(jbtnExport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jlstExportTypesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstExportTypesValueChanged
    if (jlstExportTypes.getSelectedIndex() == 1) {
        CardLayout lay = (CardLayout) jpExportOptions.getLayout();
        if (visiblePanel == 0) {
            lay.next(jpExportOptions);
        } else if (visiblePanel == 2) {
            lay.previous(jpExportOptions);
        }
        visiblePanel = previousPanel = 1;
    } else {
        CardLayout lay = (CardLayout) jpExportOptions.getLayout();
        lay.first(jpExportOptions);
        visiblePanel = previousPanel = 0;
    }
}//GEN-LAST:event_jlstExportTypesValueChanged

private void jbtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelActionPerformed
    dispose();
}//GEN-LAST:event_jbtnCancelActionPerformed

private void jbtnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnExportActionPerformed
    //csv html sql ods xls xml
    switch (jlstExportTypes.getSelectedIndex()) {
        case 0://CSV
            CSV cvs = new CSV(selectedFile);
            cvs.addListener(this);
            cvs.export();
            break;
        case 1://HTML
            HTML html = new HTML(selectedFile, "", "");//TODO: get the proper values for HTML export
            html.addListener(this);
            html.export();
            break;
        case 2://SQL
            SQL sql = new SQL(selectedFile);
            sql.addListener(this);
            sql.export();
            break;
        case 3://ODS
            ODS ods = new ODS(selectedFile);
            ods.addListener(this);
            ods.export();
            break;
        case 4://XLS
            XLS xls = new XLS(selectedFile);
            xls.addListener(this);
            xls.export();
            break;
        case 5://XML
            XML xml = new XML(selectedFile);
            xml.addListener(this);
            xml.export();
    }
}//GEN-LAST:event_jbtnExportActionPerformed

private void jbtnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnHelpActionPerformed
// TODO: help actions
}//GEN-LAST:event_jbtnHelpActionPerformed

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
    JFileChooser jfc = new JFileChooser();
    if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        selectedFile = jfc.getSelectedFile();
        jtfDestination.setText(selectedFile.getAbsolutePath().trim());
    }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jbtnTemplateBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnTemplateBrowseActionPerformed
    JFileChooser jfc = new JFileChooser();
    if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        selectedFile = jfc.getSelectedFile();
        jtfTemplateDestination.setText(selectedFile.getAbsolutePath().trim());
    }
}//GEN-LAST:event_jbtnTemplateBrowseActionPerformed

private void jchkTemplateOpenAfterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jchkTemplateOpenAfterStateChanged
    //TODO: open HTML file after exporting
}//GEN-LAST:event_jchkTemplateOpenAfterStateChanged

private void jcbxSelectTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbxSelectTemplateActionPerformed
//Change the selected template
}//GEN-LAST:event_jcbxSelectTemplateActionPerformed

private void jchkOpenAfterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jchkOpenAfterStateChanged
//TODO: open file after exporting
}//GEN-LAST:event_jchkOpenAfterStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JButton jbtnCancel;
    private javax.swing.JButton jbtnExport;
    private javax.swing.JButton jbtnHelp;
    private javax.swing.JButton jbtnTemplateBrowse;
    private javax.swing.JComboBox jcbxSelectTemplate;
    private javax.swing.JCheckBox jchkIncludeAudioC;
    private javax.swing.JCheckBox jchkIncludeCustomI;
    private javax.swing.JCheckBox jchkIncludeImages;
    private javax.swing.JCheckBox jchkIncludeVideoP;
    private javax.swing.JCheckBox jchkOpenAfter;
    private javax.swing.JCheckBox jchkTemplateOpenAfter;
    private javax.swing.JLabel jlblDestination;
    private javax.swing.JLabel jlblInclude;
    private javax.swing.JLabel jlblPreview;
    private javax.swing.JLabel jlblSelectTemplate;
    private javax.swing.JLabel jlblTemplateAuthor;
    private javax.swing.JLabel jlblTemplateAuthorValue;
    private javax.swing.JLabel jlblTemplateDestination;
    private javax.swing.JList jlstExportTypes;
    private javax.swing.JPanel jpExportOptions;
    private javax.swing.JPanel jpExportType;
    private javax.swing.JPanel jpFileExport;
    private javax.swing.JPanel jpPreview;
    private javax.swing.JPanel jpProgressBar;
    private javax.swing.JPanel jpTemplateDetails;
    private javax.swing.JPanel jpTemplateExport;
    private javax.swing.JProgressBar jpbExportProgress;
    private javax.swing.JSeparator jsDetailsSeparator;
    private javax.swing.JTextField jtfDestination;
    private javax.swing.JTextField jtfTemplateDestination;
    // End of variables declaration//GEN-END:variables
    public void exportStarted() {
        visiblePanel = 2;
        CardLayout lay = (CardLayout) jpExportOptions.getLayout();
        lay.last(jpExportOptions);
    }

    public void exportFinished() {
        if (previousPanel == 0) {
            CardLayout lay = (CardLayout) jpExportOptions.getLayout();
            lay.first(jpExportOptions);
        } else {
            CardLayout lay = (CardLayout) jpExportOptions.getLayout();
            lay.previous(jpExportOptions);
        }
        visiblePanel = previousPanel;
    }

    public void exportError() {
        //TODO: show error message
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * Renderer class for showing icons on the list of existing export options
     */
    private class Renderer extends JLabel implements ListCellRenderer {

        private ImageIcon[] images;

        public Renderer() {
            images = new ImageIcon[]{
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-csv.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-html.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-ods.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-sql.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-xls.png")),
                        new ImageIcon(Utilities.loadImage("de/berlios/jfindmyfiles/jfindmyfilesgui/resources/images/x48/export-import-xml.png"))
                    };

            setOpaque(true);
            setHorizontalAlignment(SwingConstants.CENTER);
            setVerticalAlignment(SwingConstants.CENTER);
        }

        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            int selectedIndex = ((Integer) value).intValue();

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            setIcon(images[selectedIndex]);
            setFont(list.getFont());
            return this;
        }
    }
    
    private class Template {
        
        private ImageIcon preview;
        private String author;
        private String name;
        
        public Template(ImageIcon preview, String author, String name) {
            this.preview = preview;
            this.author = author;
            this.name = name;
        }

        public String getAuthor() {
            return author;
        }

        public String getName() {
            return name;
        }

        public ImageIcon getPreview() {
            return preview;
        }
        
        @Override
        public String toString() {
            return name;
        }
    }
}
