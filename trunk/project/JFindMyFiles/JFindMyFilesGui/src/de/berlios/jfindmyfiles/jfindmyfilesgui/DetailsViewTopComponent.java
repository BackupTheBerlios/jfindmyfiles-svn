/**
 *  Copyright (C) 2008  Patrícia Monteiro e Sérgio Lopes
 *
 *  This file is part of JFindMyFiles.
 *
 *  JFindMyFiles is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JFindMyFiles is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JFindMyFiles.  If not, see 
 * <http://www.gnu.org/licenses/gpl.html>.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui;

import de.berlios.jfindmyfiles.catalog.CatalogConstants;
import de.berlios.jfindmyfiles.catalog.CatalogEngine;
import de.berlios.jfindmyfiles.catalog.entities.DiskGroup;
import de.berlios.jfindmyfiles.catalog.entities.FileWrapper;
import de.berlios.jfindmyfiles.catalog.entities.Media;
import java.awt.BorderLayout;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.table.AbstractTableModel;
import org.hibernate.Session;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.ListView;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
final class DetailsViewTopComponent extends TopComponent implements ExplorerManager.Provider, LookupListener {

    private static DetailsViewTopComponent instance;
    private static final String PREFERRED_ID = "DetailsViewTopComponent";
    private ExplorerManager manager;
    private ListView view;
    private Lookup.Result engineLookup;
    private Lookup.Result mediaLookup;
    private Lookup.Result fileLookup;
    private Lookup.Result groupLookup;

    private DetailsViewTopComponent() {
        myInitComponents();
        addLookupListeners();
        setName(NbBundle.getMessage(DetailsViewTopComponent.class, "CTL_DetailsViewTopComponent"));
        setToolTipText(NbBundle.getMessage(DetailsViewTopComponent.class, "HINT_DetailsViewTopComponent"));

    }

    private void myInitComponents() {
        manager = new ExplorerManager();
        setLayout(new BorderLayout());
        view = new ListView();
        add(view, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 358, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 92, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized DetailsViewTopComponent getDefault() {
        if (instance == null) {
            instance = new DetailsViewTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the DetailsViewTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DetailsViewTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DetailsViewTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DetailsViewTopComponent) {
            return (DetailsViewTopComponent) win;
        }
        Logger.getLogger(DetailsViewTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void componentOpened() {
        addLookupListeners();
    }

    @Override
    public void componentClosed() {
        engineLookup.removeLookupListener(this);
        engineLookup = null;
        groupLookup.removeLookupListener(this);
        groupLookup = null;
        mediaLookup.removeLookupListener(this);
        mediaLookup = null;
        fileLookup.removeLookupListener(this);
        fileLookup = null;
    }

    private void addLookupListeners() {
        if (engineLookup == null) {
            engineLookup = Utilities.actionsGlobalContext().lookup(new Lookup.Template<CatalogEngine>(CatalogEngine.class));
            engineLookup.addLookupListener(this);
        }
        if (groupLookup == null) {
            groupLookup = Utilities.actionsGlobalContext().lookup(new Lookup.Template<DiskGroup>(DiskGroup.class));
            groupLookup.addLookupListener(this);
        }
        if (mediaLookup == null) {


            mediaLookup = Utilities.actionsGlobalContext().lookup(new Lookup.Template<Media>(Media.class));
            mediaLookup.addLookupListener(this);
        }
        if (fileLookup == null) {
            fileLookup = Utilities.actionsGlobalContext().lookup(new Lookup.Template<FileWrapper>(FileWrapper.class));
            fileLookup.addLookupListener(this);
        }
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return DetailsViewTopComponent.getDefault();
        }
    }

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void resultChanged(LookupEvent arg0) {
        //NOTE: Why is this always on step behind?
        //TODO: BUG! When one expands more than one node wihtout making a selections
        //the node is always one node behind the current selection.
        TopComponent.Registry registry = TopComponent.getRegistry();
        Node[] act = registry.getActivatedNodes();
        if (act.length > 0) {
            manager.setRootContext(act[0]);
        }
    }
}
