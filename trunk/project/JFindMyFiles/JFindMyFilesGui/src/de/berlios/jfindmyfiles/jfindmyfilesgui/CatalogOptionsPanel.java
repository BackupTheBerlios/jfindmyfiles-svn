/**
 *  Copyright (C) 2008  Patrícia Monteiro e Sérgio Lopes
 *
 *  This file is part of JFindMyFiles.
 *
 *  JFindMyFiles is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JFindMyFiles is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JFindMyFiles.  If not, see 
 * <http://www.gnu.org/licenses/gpl.html>.
 */

package de.berlios.jfindmyfiles.jfindmyfilesgui;

final class CatalogOptionsPanel extends javax.swing.JPanel {

    private final CatalogOptionsPanelController controller;

    CatalogOptionsPanel(CatalogOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * Enables or disables the various components that refer to the remote 
     * database's settings.
     * 
     * @param state true/false for activating and deactivating the components.
     */
    private void serverOptionsStateChanged(boolean state) {
        jpDatabaseSettings.setEnabled(state);
        //Labels
        jlblDatabase.setEnabled(state);
        jlblHostname.setEnabled(state);
        jlblPassword.setEnabled(state);
        jlblPassword.setEnabled(state);
        jlblPort.setEnabled(state);
        jlblUsername.setEnabled(state);
        
        //Inputs
        jtfHostname.setEnabled(state);
        jtfUsername.setEnabled(state);
        jpfPassword.setEnabled(state);
        jffPort.setEnabled(state);
        jcbxDatabase.setEnabled(state);
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jchkUserinternalDB = new javax.swing.JCheckBox();
        jlblDefaultLocation = new javax.swing.JLabel();
        jtfDefaultLocation = new javax.swing.JTextField();
        jpDatabaseSettings = new javax.swing.JPanel();
        jlblHostname = new javax.swing.JLabel();
        jtfHostname = new javax.swing.JTextField();
        jlblUsername = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jlblPort = new javax.swing.JLabel();
        jffPort = new javax.swing.JFormattedTextField();
        jlblPassword = new javax.swing.JLabel();
        jlblDatabase = new javax.swing.JLabel();
        jcbxDatabase = new javax.swing.JComboBox();
        jpfPassword = new javax.swing.JPasswordField();
        jbtnBrowse = new javax.swing.JButton();

        jchkUserinternalDB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jchkUserinternalDB, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jchkUserinternalDB.text")); // NOI18N
        jchkUserinternalDB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jchkUserinternalDBStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jlblDefaultLocation, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblDefaultLocation.text")); // NOI18N

        jtfDefaultLocation.setText(org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jtfDefaultLocation.text")); // NOI18N

        jpDatabaseSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Server "));
        jpDatabaseSettings.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblHostname, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblHostname.text")); // NOI18N
        jlblHostname.setEnabled(false);

        jtfHostname.setAutoscrolls(false);
        jtfHostname.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblUsername, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblUsername.text")); // NOI18N
        jlblUsername.setEnabled(false);

        jtfUsername.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblPort, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblPort.text")); // NOI18N
        jlblPort.setEnabled(false);

        jffPort.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblPassword, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblPassword.text")); // NOI18N
        jlblPassword.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblDatabase, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblDatabase.text")); // NOI18N
        jlblDatabase.setEnabled(false);

        jcbxDatabase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Firebird", "PostgreSQL", "MsSQL", "MySQL" }));
        jcbxDatabase.setEnabled(false);

        jpfPassword.setEnabled(false);

        org.jdesktop.layout.GroupLayout jpDatabaseSettingsLayout = new org.jdesktop.layout.GroupLayout(jpDatabaseSettings);
        jpDatabaseSettings.setLayout(jpDatabaseSettingsLayout);
        jpDatabaseSettingsLayout.setHorizontalGroup(
            jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpDatabaseSettingsLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpDatabaseSettingsLayout.createSequentialGroup()
                        .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jlblPassword)
                            .add(jlblHostname)
                            .add(jlblUsername))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jtfHostname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                            .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jpfPassword)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jtfUsername, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, jpDatabaseSettingsLayout.createSequentialGroup()
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(jcbxDatabase, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(jlblDatabase))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jlblPort)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jffPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpDatabaseSettingsLayout.setVerticalGroup(
            jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpDatabaseSettingsLayout.createSequentialGroup()
                .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblHostname)
                    .add(jffPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblPort)
                    .add(jtfHostname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblUsername)
                    .add(jtfUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlblPassword)
                    .add(jpfPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpDatabaseSettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblDatabase)
                    .add(jcbxDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(jbtnBrowse, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jbtnBrowse.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(24, 24, 24)
                        .add(jpDatabaseSettings, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(12, 12, 12)
                                .add(jlblDefaultLocation)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jtfDefaultLocation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                .add(6, 6, 6)
                                .add(jbtnBrowse))
                            .add(jchkUserinternalDB))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jchkUserinternalDB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblDefaultLocation)
                    .add(jtfDefaultLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnBrowse))
                .add(11, 11, 11)
                .add(jpDatabaseSettings, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void jchkUserinternalDBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jchkUserinternalDBStateChanged
    serverOptionsStateChanged(!jchkUserinternalDB.isSelected());
    jbtnBrowse.setEnabled(jchkUserinternalDB.isSelected());
    jtfDefaultLocation.setEnabled(jchkUserinternalDB.isSelected());
}//GEN-LAST:event_jchkUserinternalDBStateChanged
    void load() {
    // TODO read settings and initialize GUI
    // Example:        
    // someCheckBox.setSelected(Preferences.userNodeForPackage(CatalogOptionsPanel.class).getBoolean("someFlag", false));
    // or for org.openide.util with API spec. version >= 7.4:
    // someCheckBox.setSelected(NbPreferences.forModule(CatalogOptionsPanel.class).getBoolean("someFlag", false));
    // or:
    // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
    // TODO store modified settings
    // Example:
    // Preferences.userNodeForPackage(CatalogOptionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or for org.openide.util with API spec. version >= 7.4:
    // NbPreferences.forModule(CatalogOptionsPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or:
    // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JComboBox jcbxDatabase;
    private javax.swing.JCheckBox jchkUserinternalDB;
    private javax.swing.JFormattedTextField jffPort;
    private javax.swing.JLabel jlblDatabase;
    private javax.swing.JLabel jlblDefaultLocation;
    private javax.swing.JLabel jlblHostname;
    private javax.swing.JLabel jlblPassword;
    private javax.swing.JLabel jlblPort;
    private javax.swing.JLabel jlblUsername;
    private javax.swing.JPanel jpDatabaseSettings;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextField jtfDefaultLocation;
    private javax.swing.JTextField jtfHostname;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables
}
