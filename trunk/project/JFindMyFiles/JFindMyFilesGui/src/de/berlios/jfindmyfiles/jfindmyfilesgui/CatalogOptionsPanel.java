/**
 *  Copyright (C) 2008  Patrícia Monteiro e Sérgio Lopes
 *
 *  This file is part of JFindMyFiles.
 *
 *  JFindMyFiles is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JFindMyFiles is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JFindMyFiles.  If not, see 
 * <http://www.gnu.org/licenses/gpl.html>.
 */
package de.berlios.jfindmyfiles.jfindmyfilesgui;

import de.berlios.jfindmyfiles.catalog.CatalogConstants;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbPreferences;

final class CatalogOptionsPanel extends javax.swing.JPanel {

    private final CatalogOptionsPanelController controller;

    CatalogOptionsPanel(CatalogOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        jtfDefaultLocation.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                invokeController();
            }

            public void removeUpdate(DocumentEvent e) {
                invokeController();
            }

            public void changedUpdate(DocumentEvent e) {
                invokeController();
            }
        });

        jtfHostname.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                invokeController();
            }

            public void removeUpdate(DocumentEvent e) {
                invokeController();
            }

            public void changedUpdate(DocumentEvent e) {
                invokeController();
            }
        });

        jtfUsername.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                invokeController();
            }

            public void removeUpdate(DocumentEvent e) {
                invokeController();
            }

            public void changedUpdate(DocumentEvent e) {
                invokeController();
            }
        });

        jpfPassword.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                invokeController();
            }

            public void removeUpdate(DocumentEvent e) {
                invokeController();
            }

            public void changedUpdate(DocumentEvent e) {
                invokeController();
            }
        });

        jffPort.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                invokeController();
            }

            public void removeUpdate(DocumentEvent e) {
                invokeController();
            }

            public void changedUpdate(DocumentEvent e) {
                invokeController();
            }
        });
    }

    /**
     * Enables or disables the various components that refer to the remote 
     * database's settings.
     * 
     * @param state true/false for activating and deactivating the components.
     */
    private void serverOptionsStateChanged(boolean state) {
        //Labels
        jlblDatabase.setEnabled(state);
        jlblHostname.setEnabled(state);
        jlblPassword.setEnabled(state);
        jlblPassword.setEnabled(state);
        jlblPort.setEnabled(state);
        jlblUsername.setEnabled(state);

        //Inputs
        jtfHostname.setEnabled(state);
        jtfUsername.setEnabled(state);
        jpfPassword.setEnabled(state);
        jffPort.setEnabled(state);
        jcbxDatabase.setEnabled(state);
        jbtnBrowse.setEnabled(!state);
        jtfDefaultLocation.setEnabled(!state);
    }

    /**
     * Calls <code>controller.changed()</code> in order to inform this panel's controller 
     * that some changes happen and need to be stored.
     */
    private void invokeController() {
        controller.changed();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jchkUserinternalDB = new javax.swing.JCheckBox();
        jlblDefaultLocation = new javax.swing.JLabel();
        jtfDefaultLocation = new javax.swing.JTextField();
        jbtnBrowse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jlblHostname = new javax.swing.JLabel();
        jtfHostname = new javax.swing.JTextField();
        jlblPort = new javax.swing.JLabel();
        jffPort = new javax.swing.JFormattedTextField();
        jlblUsername = new javax.swing.JLabel();
        jlblPassword = new javax.swing.JLabel();
        jlblDatabase = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jpfPassword = new javax.swing.JPasswordField();
        jcbxDatabase = new javax.swing.JComboBox();

        jchkUserinternalDB.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(jchkUserinternalDB, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jchkUserinternalDB.text")); // NOI18N
        jchkUserinternalDB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jchkUserinternalDBStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jlblDefaultLocation, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblDefaultLocation.text")); // NOI18N

        jtfDefaultLocation.setText(org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jtfDefaultLocation.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jbtnBrowse, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jbtnBrowse.text")); // NOI18N
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jlblHostname, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblHostname.text")); // NOI18N
        jlblHostname.setEnabled(false);

        jtfHostname.setAutoscrolls(false);
        jtfHostname.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblPort, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblPort.text")); // NOI18N
        jlblPort.setEnabled(false);

        jffPort.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblUsername, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblUsername.text")); // NOI18N
        jlblUsername.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblPassword, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblPassword.text")); // NOI18N
        jlblPassword.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(jlblDatabase, org.openide.util.NbBundle.getMessage(CatalogOptionsPanel.class, "CatalogOptionsPanel.jlblDatabase.text")); // NOI18N
        jlblDatabase.setEnabled(false);

        jtfUsername.setEnabled(false);

        jpfPassword.setEnabled(false);

        jcbxDatabase.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Firebird", "PostgreSQL", "MsSQL", "MySQL" }));
        jcbxDatabase.setEnabled(false);
        jcbxDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbxDatabaseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jchkUserinternalDB)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jlblDefaultLocation)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtfDefaultLocation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                        .add(6, 6, 6)
                        .add(jbtnBrowse))
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jlblHostname)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jtfHostname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jlblPassword)
                                    .add(jlblUsername)
                                    .add(jlblDatabase))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jpfPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                                    .add(jcbxDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 166, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jtfUsername, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))))
                        .add(18, 18, 18)
                        .add(jlblPort)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jffPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jchkUserinternalDB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblDefaultLocation)
                    .add(jtfDefaultLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnBrowse))
                .add(26, 26, 26)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel1)
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblHostname)
                    .add(jffPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jlblPort)
                    .add(jtfHostname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblUsername)
                    .add(jtfUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblPassword)
                    .add(jpfPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlblDatabase)
                    .add(jcbxDatabase, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jchkUserinternalDBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jchkUserinternalDBStateChanged
    serverOptionsStateChanged(!jchkUserinternalDB.isSelected());
}//GEN-LAST:event_jchkUserinternalDBStateChanged

private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
    JFileChooser jfc = new JFileChooser(System.getProperty("user.home"));
    jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    jfc.setMultiSelectionEnabled(false);
    if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
        jtfDefaultLocation.setText(jfc.getSelectedFile().getAbsolutePath());
    }
}//GEN-LAST:event_jbtnBrowseActionPerformed

private void jcbxDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbxDatabaseActionPerformed
    invokeController();
}//GEN-LAST:event_jcbxDatabaseActionPerformed
    
    void load() {
        jchkUserinternalDB.setSelected(NbPreferences.forModule(CatalogOptionsPanel.class).getBoolean("internaldb", true));
        jtfDefaultLocation.setText(NbPreferences.forModule(CatalogOptionsPanel.class).get("defaultpath", System.getProperty("user.home")));
        NbPreferences.forModule(CatalogOptionsPanel.class).get("hostname", jtfHostname.getText().trim());
        jtfUsername.setText(NbPreferences.forModule(CatalogOptionsPanel.class).get("username", ""));
        jpfPassword.setText(NbPreferences.forModule(CatalogOptionsPanel.class).get("password", ""));
        jffPort.setText(String.valueOf(NbPreferences.forModule(CatalogOptionsPanel.class).getInt("port", 0)));
        switch (NbPreferences.forModule(CatalogOptionsPanel.class).getInt("database", CatalogConstants.LOCAL)) {
            case CatalogConstants.MSSQL:
                jcbxDatabase.setSelectedItem("Firebird");
                break;
            case CatalogConstants.MYSQL:
                jcbxDatabase.setSelectedItem("MsSQL");
                break;
            case CatalogConstants.POSTGRESQL:
                jcbxDatabase.setSelectedItem("PostgreSQL");
                break;
        }
        serverOptionsStateChanged(!jchkUserinternalDB.isSelected());
    }

    void store() {
        NbPreferences.forModule(CatalogOptionsPanel.class).putBoolean("internaldb", jchkUserinternalDB.isSelected());
        NbPreferences.forModule(CatalogOptionsPanel.class).put("defaultpath", jtfDefaultLocation.getText().trim());
        NbPreferences.forModule(CatalogOptionsPanel.class).put("hostname", jtfHostname.getText().trim());
        NbPreferences.forModule(CatalogOptionsPanel.class).put("username", jtfUsername.getText().trim());
        NbPreferences.forModule(CatalogOptionsPanel.class).put("password", String.valueOf(jpfPassword.getPassword()));
        NbPreferences.forModule(CatalogOptionsPanel.class).putInt("port", Integer.parseInt(jffPort.getText()));
        String db = (String) jcbxDatabase.getSelectedItem();
        NbPreferences.forModule(CatalogOptionsPanel.class).putInt("database", db.equals("Firebird") ? CatalogConstants.FIREBIRD : (db.equals("PostgreSQL") ? CatalogConstants.POSTGRESQL : (db.equals("MsSQL") ? CatalogConstants.MSSQL : CatalogConstants.MYSQL))); // NOI18N
    }

    boolean valid() {
        if (jchkUserinternalDB.isSelected()) {
            return !jtfDefaultLocation.getText().trim().isEmpty();
        }
        if (!jchkUserinternalDB.isSelected()) {
            return !(jtfHostname.getText().trim().isEmpty() && jtfUsername.getText().trim().isEmpty() 
                    && jffPort.getText().trim().isEmpty());
        }
        //NOTE: This is never executed...
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JComboBox jcbxDatabase;
    private javax.swing.JCheckBox jchkUserinternalDB;
    private javax.swing.JFormattedTextField jffPort;
    private javax.swing.JLabel jlblDatabase;
    private javax.swing.JLabel jlblDefaultLocation;
    private javax.swing.JLabel jlblHostname;
    private javax.swing.JLabel jlblPassword;
    private javax.swing.JLabel jlblPort;
    private javax.swing.JLabel jlblUsername;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextField jtfDefaultLocation;
    private javax.swing.JTextField jtfHostname;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables
}
